version: '3.8'

services:
  synchronizer:
    image: digitalasset/canton-open-source:latest
    container_name: canton-synchronizer
    ports:
      - "5018:5018"
      - "5019:5019"
    volumes:
      - ./canton/synchronizer.conf:/canton/synchronizer.conf:ro
    command: daemon --config /canton/synchronizer.conf
    restart: unless-stopped
    networks:
      - canton-network

  participant1:
    image: digitalasset/canton-open-source:latest
    container_name: canton-participant1
    ports:
      - "5011:5011"
      - "5012:5012"
      - "7011:7011"
    volumes:
      - ./canton/participant1.conf:/canton/participant1.conf:ro
      - ../daml/.daml/dist/payment-demo-0.0.1.dar:/canton/payment-demo-0.0.1.dar:ro
    command: daemon --config /canton/participant1.conf
    restart: unless-stopped
    networks:
      - canton-network
    depends_on:
      - synchronizer

  participant2:
    image: digitalasset/canton-open-source:latest
    container_name: canton-participant2
    ports:
      - "5021:5021"
      - "5022:5022"
      - "7021:7021"
    volumes:
      - ./canton/participant2.conf:/canton/participant2.conf:ro
      - ../daml/.daml/dist/payment-demo-0.0.1.dar:/canton/payment-demo-0.0.1.dar:ro
    command: daemon --config /canton/participant2.conf
    restart: unless-stopped
    networks:
      - canton-network
    depends_on:
      - synchronizer

  participant3:
    image: digitalasset/canton-open-source:latest
    container_name: canton-participant3
    ports:
      - "5031:5031"
      - "5032:5032"
      - "7031:7031"
    volumes:
      - ./canton/participant3.conf:/canton/participant3.conf:ro
      - ../daml/.daml/dist/payment-demo-0.0.1.dar:/canton/payment-demo-0.0.1.dar:ro
    command: daemon --config /canton/participant3.conf
    restart: unless-stopped
    networks:
      - canton-network
    depends_on:
      - synchronizer

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: canton-backend
    ports:
      - "3001:3001"
    environment:
      # Use .env file for configuration
      - PORT=3001
      - NODE_ENV=production
    env_file:
      - ../backend/.env
    networks:
      - canton-network
    depends_on:
      - participant1
      - participant2
      - participant3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: canton-frontend
    ports:
      - "3000:80"
    networks:
      - canton-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

networks:
  canton-network:
    driver: bridge
